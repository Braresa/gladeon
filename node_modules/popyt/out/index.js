"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.YouTube = void 0;
const entities_1 = require("./entities");
const util_1 = require("./util");
const oauth_1 = require("./oauth");
const services_1 = require("./services");
__exportStar(require("./entities"), exports);
__exportStar(require("./types"), exports);
/**
 * The main class used to interact with the YouTube API. Use this.
 */
class YouTube {
    /**
     *
     * @param token Your YouTube Data API v3 token. Don't share this with anybody.
     * It could be an API key or an OAuth 2.0 token.
     * @param accessToken A Google OAuth 2.0 access token. Used for [[YouTube#oauth]] methods.
     * @param options Caching options. Recommended to change.
     * @param language The language for the API to respond in. See [[YouTube#getLanguages]].
     * @param region The region for the API cater responses to. See [[YouTube#getRegions]].
     */
    constructor(token, accessToken, options = { cache: true, cacheTTL: 600, cacheCheckInterval: 600, cacheSearches: true }, language = 'en_US', region = 'US') {
        /**
         * @ignore
         */
        this._request = new util_1.Request('https://www.googleapis.com/youtube/v3');
        /**
         * @ignore
         */
        this._upload = new util_1.Request('https://www.googleapis.com/upload/youtube/v3');
        this.token = token;
        this.accessToken = accessToken;
        if (!this.accessToken && !this.token) {
            throw new TypeError('Must include one of token or access token whenever constructing the YouTube object.');
        }
        this.oauth = new oauth_1.OAuth(this);
        this._shouldCache = options.cache;
        this._cacheSearches = options.cacheSearches;
        this._cacheTTL = options.cacheTTL;
        this.language = language;
        this.region = region;
        if (options.cacheCheckInterval > 0) {
            setInterval(util_1.Cache.checkTTLs, options.cacheCheckInterval * 1000);
        }
    }
    /**
     * @ignore
     */
    _cache(id, value) {
        if (!this._shouldCache) {
            return;
        }
        util_1.Cache.set(id, value, this._cacheTTL > 0 ? this._cacheTTL * 1000 + new Date().getTime() : 0);
    }
    /**
     * Search supported entities on YouTube.
     * @param types An array of types to search for. May be a single type or multiple types.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param fields The fields to include in the response. Includes all by default.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    search(types, searchTerm, maxResults = 10, pageToken, fields) {
        return services_1.SearchService.search(this, types, searchTerm, maxResults, pageToken, fields);
    }
    /**
     * Search videos on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     * @param category The category ID that you want to specifically search for.
     * @param onlyEmbeddable Whether or not to return only embeddable videos.
     * @param eventType The type of event you want to search for. Searches for everything by default.
     */
    searchVideos(searchTerm, maxResults = 10, pageToken, category, onlyEmbeddable = false, eventType, type = 'any') {
        return services_1.SearchService.search(this, [entities_1.Video], searchTerm, maxResults, pageToken, null, category, onlyEmbeddable, eventType, type);
    }
    /**
     * Search channels on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchChannels(searchTerm, maxResults = 10, pageToken) {
        return this.search([entities_1.Channel], searchTerm, maxResults, pageToken);
    }
    /**
     * Search playlists on YouTube.
     * @param searchTerm What to search for on YouTube.
     * @param maxResults The maximum amount of results to find. Defaults to 10.
     * @param pageToken The page token to start at. Provide this if you have received it as output from a call to a search method.
     */
    searchPlaylists(searchTerm, maxResults = 10, pageToken) {
        return this.search([entities_1.Playlist], searchTerm, maxResults, pageToken);
    }
    /**
     * Get a [[Video]] object from the URL, ID, or Title of a video.
     * Meant mostly for getting by URL or ID.
     * @param videoResolvable The URL, ID, or Title of the video.
     */
    getVideo(videoResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, videoResolvable, entities_1.Video);
            return services_1.GenericService.getItem(this, entities_1.Video, false, id);
        });
    }
    /**
     * Get a [[Channel]] object from the Username, URL or ID of a channel.
     * Meant mostly for getting by URL or ID.
     * @param channelResolvable The Username, URL or ID of the channel.
     */
    getChannel(channelResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getItem(this, entities_1.Channel, false, id);
        });
    }
    /**
     * Get a [[Playlist]] object from the URL, ID, or Title of a playlist.
     * Meant mostly for getting by URL or ID.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     */
    getPlaylist(playlistResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield services_1.GenericService.getId(this, playlistResolvable, entities_1.Playlist);
            return services_1.GenericService.getItem(this, entities_1.Playlist, false, id);
        });
    }
    /**
     * Get a [[Comment]] object from the ID of a comment.
     * @param commentId The ID of the comment.
     */
    getComment(commentId) {
        return services_1.GenericService.getItem(this, entities_1.YTComment, false, commentId);
    }
    /**
     * Get a [[Subscription]] object from the ID of a subscription.
     * @param subscriptionId The ID of the subscription.
     */
    getSubscription(subscriptionId) {
        return services_1.GenericService.getItem(this, entities_1.Subscription, false, subscriptionId);
    }
    /**
     * Get a [[VideoCategory]] object from the ID of a category.
     * @param categoryId The ID of the category.
     */
    getCategory(categoryId) {
        return services_1.GenericService.getItem(this, entities_1.VideoCategory, false, categoryId);
    }
    /**
     * Get a [[GuideCategory]] object from the ID of a category.
     * @param categoryId The ID of the category.
     */
    getGuideCategory(categoryId) {
        return services_1.GenericService.getItem(this, entities_1.GuideCategory, false, categoryId);
    }
    /**
     * Get a [[ChannelSection]] object from the ID of a section.
     * @param categoryId The ID of the section.
     */
    getChannelSection(sectionId) {
        return services_1.GenericService.getItem(this, entities_1.ChannelSection, false, sectionId);
    }
    /**
     * Get a [[Subscription]] object from the subscriber and channel of a subscription.
     * @param subscriberResolvable A resolvable channel that is the subscriber.
     * @param channelResolvable A resolvable channel that is the channel being subscribed to.
     */
    getSubscriptionByChannels(subscriberResolvable, channelResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const subscriberId = yield services_1.GenericService.getId(this, subscriberResolvable, entities_1.Channel);
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.SubscriptionService.getSubscriptionByChannels(this, subscriberId, channelId);
        });
    }
    /**
     * Get `maxResults` videos in a [[Playlist]]. Used mostly internally with `Playlist#fetchVideos`.
     * @param playlistResolvable The URL, ID, or Title of the playlist.
     * @param maxResults The maximum amount of videos to get from the playlist. If <=0, returns all videos in the playlist.
     * @returns Partial video objects.
     */
    getPlaylistItems(playlistResolvable, maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const playlistId = yield services_1.GenericService.getId(this, playlistResolvable, entities_1.Playlist);
            return services_1.GenericService.getPaginatedItems(this, 'playlistItems', false, playlistId, maxResults);
        });
    }
    /**
     * Get `maxResults` [[YTComment]]s from a [[Video]]. Used mostly internally with `Video#fetchComments`.
     * @param videoResolvable The URL, ID, or Title of the video.
     * @param maxResults The maximum amount of comments to get from the video. If <=0, returns all comments on the video.
     * @returns Partial comment objects.
     */
    getVideoComments(videoResolvable, maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const videoId = yield services_1.GenericService.getId(this, videoResolvable, entities_1.Video);
            return services_1.GenericService.getPaginatedItems(this, 'commentThreads:video', false, videoId, maxResults);
        });
    }
    /**
     * Get `maxResults` [[YTComment]]s from a [[Channel]]'s discussion tab. Used mostly internally with `Channel#fetchComments`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of comments to get from the channel. If <=0, returns all comments on the channel.
     * @returns Partial comment objects.
     */
    getChannelComments(channelResolvable, maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'commentThreads:channel', false, channelId, maxResults);
        });
    }
    /**
     * Get `maxResults` of a [[Channel]]'s [[Playlist]]s. Used mostly internally with `Channel#fetchPlaylists`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of playlists to get from the channel. If <=0, returns all playlists.
     * @returns Partial playlist objects.
     */
    getChannelPlaylists(channelResolvable, maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'playlists:channel', false, channelId, maxResults);
        });
    }
    /**
     * Get `maxResults` of a [[Channel]]'s [[Subscription]]s. Used mostly internally with `Channel#fetchSubscriptions`.
     * @param channelResolvable The Username, URL, or ID of the channel.
     * @param maxResults The maximum amount of subscriptions to get from the channel. If <=0, returns all subscriptions.
     * @returns Partial subscription objects.
     */
    getChannelSubscriptions(channelResolvable, maxResults = 10) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'subscriptions', false, channelId, maxResults);
        });
    }
    /**
     * Get `maxResults` replies to a [[YTComment]]. Used mostly internally with `Comment#fetchReplies`.
     * @param commentId The ID of the comment to get replies from.
     * @param maxResults The maximum amount of replies to get. Gets all replies if <=0.
     * @returns Partial comment objects.
     */
    getCommentReplies(commentId, maxResults = 10) {
        return services_1.GenericService.getPaginatedItems(this, 'comments', false, commentId, maxResults);
    }
    /**
     * Gets the [[ChannelSection]]s of a [[Channel]]. Used mostly internally with [[Channel#fetchSections]].
     * @param channelResolvable The Username, URL, or ID of the channel to get the sections from.
     * @returns Partial channel section objects.
     */
    getChannelSections(channelResolvable) {
        return __awaiter(this, void 0, void 0, function* () {
            const channelId = yield services_1.GenericService.getId(this, channelResolvable, entities_1.Channel);
            return services_1.GenericService.getPaginatedItems(this, 'channelSections', false, channelId);
        });
    }
    /**
     * Get a list of categories of a country.
     * @param all Whether or not to get all categories (otherwise just gets a page).
     */
    getCategories(all = false) {
        return services_1.GenericService.getPaginatedItems(this, 'videoCategories', false, null, all ? -1 : 100);
    }
    /**
     * Get a list of guide categories of a country.
     * @param region An [ISO 3166-1 alpha-2](https://www.iso.org/iso-3166-country-codes.html) region code.
     * Defaults to the US.
     * @param all Whether or not to get all categories (otherwise just gets a page).
     */
    getGuideCategories() {
        return services_1.GenericService.getPaginatedItems(this, 'guideCategories', false);
    }
    /**
     * Get a list of languages that YouTube supports.
     */
    getLanguages() {
        return services_1.GenericService.getPaginatedItems(this, 'i18nLanguages', false, null);
    }
    /**
     * Get a list of regions that YouTube supports.
     */
    getRegions() {
        return services_1.GenericService.getPaginatedItems(this, 'i18nRegions', false, null);
    }
}
exports.YouTube = YouTube;
exports.default = YouTube;

//# sourceMappingURL=index.js.map
